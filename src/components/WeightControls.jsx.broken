import React, { memo } from 'react';
import WeightSlider from './WeightSlider.jsx';

const WeightControls = memo(({ 
  weights, 
  onUpdateWeight, 
  onNormalizeWeights,
  showDetails,
  onShowDetails,
  // Sub-component weights and handlers
  supportWeights,
  onUpdateSupportWeight,
  onNormalizeSupportWeights,
  statsWeights,
  onUpdateStatsWeight,
  onNormalizeStatsWeights,
  efficiencyWeights,
  onUpdateEfficiencyWeight,
  onNormalizeEfficiencyWeights,
  protectionWeights,
  onUpdateProtectionWeight,
  onNormalizeProtectionWeights,
  volumeWeights,
  onUpdateVolumeWeight,
  onNormalizeVolumeWeights,
  teamWeights,
  onUpdateTeamWeight,
  onNormalizeTeamWeights,
  clutchWeights,
  onUpdateClutchWeight,
  onNormalizeClutchWeights,
  durabilityWeights,
  onUpdateDurabilityWeight,
  onNormalizeDurabilityWeights,
  includePlayoffs
}) => {
  const totalWeight = Object.values(weights).reduce((a, b) => a + b, 0);

  const weightDescriptions = {
    team: 'Win-loss record, playoff success (NEW: Round-specific weighting)',
    stats: 'ANY/A, success rate, production (NEW: Playoff stat bonuses)',
    clutch: 'Game-winning drives, 4QC (NEW: Round-specific multipliers)',
    durability: 'Games started, consistency',
    support: 'Extra credit for poor supporting cast'
  };

  // Compact weight component with condensed manual controls
  const CompactWeightComponent = ({ component, value, onChange, className, description, min = "0", max = "100" }) => (
    <div className="bg-white/5 rounded-lg p-2">
      <div className="flex justify-between items-center mb-1">
        <label className="text-white font-medium text-xs">
          {component === 'offensiveLine' ? 'O-Line' :
           component === 'gameWinningDrives' ? 'GWD' :
           component === 'fourthQuarterComebacks' ? '4QC' :
           component === 'clutchRate' ? 'Rate' :
           component === 'playoffBonus' ? 'Playoff' :
           component === 'anyA' ? 'ANY/A' :
           component === 'tdPct' ? 'TD%' :
           component === 'completionPct' ? 'Comp%' :
           component === 'sackPct' ? 'Sack%' :
           component === 'turnoverRate' ? 'TO Rate' :
           component === 'passYards' ? 'Pass Yds' :
           component === 'passTDs' ? 'Pass TDs' :
           component === 'rushYards' ? 'Rush Yds' :
           component === 'rushTDs' ? 'Rush TDs' :
           component === 'totalAttempts' ? 'Attempts' :
           component === 'availability' ? 'Available' :
           component === 'consistency' ? 'Consistent' :
           component}
        </label>
        <span className={`px-1.5 py-0.5 rounded text-xs font-medium ${className}`}>
          {value}%
        </span>
      </div>
      <div className="flex gap-1 items-center">
        <input
          type="range"
          min={min}
          max={max}
          value={value}
          onChange={(e) => onChange(component, e.target.value)}
          className={`flex-1 h-1.5 rounded-lg appearance-none cursor-pointer ${className.includes('purple') ? 'bg-purple-200' : className.includes('green') ? 'bg-green-200' : className.includes('red') ? 'bg-red-200' : className.includes('orange') ? 'bg-orange-200' : className.includes('yellow') ? 'bg-yellow-200' : 'bg-blue-200'}`}
        />
        <input
          type="number"
          min={min}
          max={max}
          value={value}
          onChange={(e) => onChange(component, e.target.value)}
          className="w-12 px-1 py-0.5 bg-white/10 border border-white/20 rounded text-white text-xs text-center"
        />
      </div>
      {description && (
        <div className="text-xs text-blue-200 mt-1 opacity-75">
          {description}
        </div>
      )}
    </div>
  );

  return (
    <div className="space-y-6">
      {/* Main Weight Sliders Grid */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 items-stretch">
        {Object.entries(weights).map(([category, value]) => (
          <div key={category} className="space-y-3 md:space-y-0">
            {/* Main Weight Slider */}
            <WeightSlider
              category={category}
              value={value}
              onUpdateWeight={onUpdateWeight}
              onShowDetails={category === 'team' ? () => onShowDetails.team() :
                            category === 'stats' ? () => onShowDetails.stats() :
                            category === 'clutch' ? () => onShowDetails.clutch() :
                            category === 'durability' ? () => onShowDetails.durability() :
                            category === 'support' ? () => onShowDetails.support() :
                            null}
              showDetails={showDetails[category]}
              description={weightDescriptions[category]}
            />

            {/* Mobile-only inline sub-components */}
            {/* Support Component Sub-Details - Mobile Only */}
            {category === 'support' && showDetails.support && (
              <div className="md:hidden bg-white/5 rounded-lg p-3 border border-purple-500/30">
                <h5 className="text-purple-200 font-medium mb-2 text-sm flex items-center">
                  üèüÔ∏è Support Components
                </h5>
                <div className="space-y-2">
                  {Object.entries(supportWeights).map(([component, value]) => (
                    <CompactWeightComponent
                      key={component}
                      component={component}
                      value={value}
                      onChange={onUpdateSupportWeight}
                      className="bg-purple-500/30 text-purple-100"
                      description={component === 'offensiveLine' ? 'Pass protection quality' :
                                 component === 'weapons' ? 'Skill position talent' :
                                 component === 'defense' ? 'Field position impact' : ''}
                    />
                  ))}
                  <div className="text-center pt-1">
                    <span className={`text-xs font-medium ${Object.values(supportWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                      Total: {Object.values(supportWeights).reduce((sum, val) => sum + val, 0)}%
                    </span>
                    {Object.values(supportWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                      <button
                        onClick={onNormalizeSupportWeights}
                        className="ml-2 bg-purple-500/20 hover:bg-purple-500/30 px-2 py-0.5 rounded text-purple-200 hover:text-white transition-colors text-xs"
                        title="Normalize to 100%"
                      >
                        ‚öñÔ∏è
                      </button>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Stats Component Sub-Details - Mobile Only */}
            {category === 'stats' && showDetails.stats && (
              <div className="md:hidden bg-white/5 rounded-lg p-3 border border-green-500/30">
                <h5 className="text-green-200 font-medium mb-2 text-sm flex items-center">
                  üìä Stats Components
                </h5>
                <div className="space-y-2">
                  {Object.entries(statsWeights).map(([component, value]) => (
                    <div key={component} className="space-y-2">
                      <CompactWeightComponent
                        component={component}
                        value={value}
                        onChange={onUpdateStatsWeight}
                        className="bg-green-500/30 text-green-100"
                        description={component === 'efficiency' ? 'ANY/A, TD%, Completion%' :
                                   component === 'protection' ? 'Sack%, Turnover Rate' :
                                   component === 'volume' ? 'Yards, TDs, Attempts' : ''}
                      />
                      
                      {/* Sub-component details for efficiency */}
                      {component === 'efficiency' && showDetails.efficiency && (
                        <div className="bg-white/3 rounded p-2 border border-green-400/20 ml-2">
                          <div className="text-xs text-green-300 mb-1 font-medium">üìà Efficiency Details</div>
                          <div className="space-y-1">
                            {Object.entries(efficiencyWeights).map(([subComponent, subValue]) => (
                              <CompactWeightComponent
                                key={subComponent}
                                component={subComponent}
                                value={subValue}
                                onChange={onUpdateEfficiencyWeight}
                                className="bg-green-500/20 text-green-200"
                              />
                            ))}
                            <div className="text-center">
                              <span className={`text-xs ${Object.values(efficiencyWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                                Total: {Object.values(efficiencyWeights).reduce((sum, val) => sum + val, 0)}%
                              </span>
                              {Object.values(efficiencyWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                                <button
                                  onClick={onNormalizeEfficiencyWeights}
                                  className="ml-1 bg-green-500/20 hover:bg-green-500/30 px-1 py-0.5 rounded text-green-200 text-xs"
                                  title="Normalize"
                                >
                                  ‚öñÔ∏è
                                </button>
                              )}
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Sub-component details for protection */}
                      {component === 'protection' && showDetails.protection && (
                        <div className="bg-white/3 rounded p-2 border border-green-400/20 ml-2">
                          <div className="text-xs text-green-300 mb-1 font-medium">üõ°Ô∏è Protection Details</div>
                          <div className="space-y-1">
                            {Object.entries(protectionWeights).map(([subComponent, subValue]) => (
                              <CompactWeightComponent
                                key={subComponent}
                                component={subComponent}
                                value={subValue}
                                onChange={onUpdateProtectionWeight}
                                className="bg-green-500/20 text-green-200"
                              />
                            ))}
                            <div className="text-center">
                              <span className={`text-xs ${Object.values(protectionWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                                Total: {Object.values(protectionWeights).reduce((sum, val) => sum + val, 0)}%
                              </span>
                              {Object.values(protectionWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                                <button
                                  onClick={onNormalizeProtectionWeights}
                                  className="ml-1 bg-green-500/20 hover:bg-green-500/30 px-1 py-0.5 rounded text-green-200 text-xs"
                                  title="Normalize"
                                >
                                  ‚öñÔ∏è
                                </button>
                              )}
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Sub-component details for volume */}
                      {component === 'volume' && showDetails.volume && (
                        <div className="bg-white/3 rounded p-2 border border-green-400/20 ml-2">
                          <div className="text-xs text-green-300 mb-1 font-medium">üìä Volume Details</div>
                          <div className="space-y-1">
                            {Object.entries(volumeWeights).map(([subComponent, subValue]) => (
                              <CompactWeightComponent
                                key={subComponent}
                                component={subComponent}
                                value={subValue}
                                onChange={onUpdateVolumeWeight}
                                className="bg-green-500/20 text-green-200"
                              />
                            ))}
                            <div className="text-center">
                              <span className={`text-xs ${Object.values(volumeWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                                Total: {Object.values(volumeWeights).reduce((sum, val) => sum + val, 0)}%
                              </span>
                              {Object.values(volumeWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                                <button
                                  onClick={onNormalizeVolumeWeights}
                                  className="ml-1 bg-green-500/20 hover:bg-green-500/30 px-1 py-0.5 rounded text-green-200 text-xs"
                                  title="Normalize"
                                >
                                  ‚öñÔ∏è
                                </button>
                              )}
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Individual component adjustment buttons */}
                      {component === 'efficiency' || component === 'protection' || component === 'volume' ? (
                        <div className="flex justify-center">
                          <button
                            onClick={() => onShowDetails[component]()}
                            className={`px-2 py-1 rounded text-xs transition-all ${
                              showDetails[component] 
                                ? 'bg-green-500/30 text-green-100 border border-green-400/50' 
                                : 'bg-green-500/20 text-green-200 border border-green-400/30'
                            }`}
                          >
                            {showDetails[component] ? '‚ñº Hide' : '‚ñ∂ Show'} Details
                          </button>
                        </div>
                      ) : null}
                    </div>
                  ))}
                  <div className="text-center pt-1">
                    <span className={`text-xs font-medium ${Object.values(statsWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                      Total: {Object.values(statsWeights).reduce((sum, val) => sum + val, 0)}%
                    </span>
                    {Object.values(statsWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                      <button
                        onClick={onNormalizeStatsWeights}
                        className="ml-2 bg-green-500/20 hover:bg-green-500/30 px-2 py-0.5 rounded text-green-200 hover:text-white transition-colors text-xs"
                        title="Normalize to 100%"
                      >
                        ‚öñÔ∏è
                      </button>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Team Component Sub-Details - Mobile Only */}
            {category === 'team' && showDetails.team && (
              <div className="md:hidden bg-white/5 rounded-lg p-3 border border-yellow-500/30">
                <h5 className="text-yellow-200 font-medium mb-2 text-sm flex items-center">
                  üèÜ Team Components
                </h5>
                <div className="space-y-2">
                  {Object.entries(teamWeights).map(([component, value]) => (
                    <CompactWeightComponent
                      key={component}
                      component={component}
                      value={value}
                      onChange={onUpdateTeamWeight}
                      className="bg-yellow-500/30 text-yellow-100"
                      description={component === 'regularSeason' ? 'Win-loss record' :
                                 component === 'playoffs' ? 'Playoff achievements' : ''}
                    />
                  ))}
                  <div className="text-center pt-1">
                    <span className={`text-xs font-medium ${Object.values(teamWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                      Total: {Object.values(teamWeights).reduce((sum, val) => sum + val, 0)}%
                    </span>
                    {!includePlayoffs && (
                      <div className="text-xs text-orange-300 mt-1">
                        ‚ö†Ô∏è Playoff component disabled
                      </div>
                    )}
                    {Object.values(teamWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                      <button
                        onClick={onNormalizeTeamWeights}
                        className="ml-2 bg-yellow-500/20 hover:bg-yellow-500/30 px-2 py-0.5 rounded text-yellow-200 hover:text-white transition-colors text-xs"
                        title="Normalize to 100%"
                      >
                        ‚öñÔ∏è
                      </button>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Clutch Component Sub-Details - Mobile Only */}
            {category === 'clutch' && showDetails.clutch && (
              <div className="md:hidden bg-white/5 rounded-lg p-3 border border-red-500/30">
                <h5 className="text-red-200 font-medium mb-2 text-sm flex items-center">
                  üíé Clutch Components
                </h5>
                <div className="space-y-2">
                  {Object.entries(clutchWeights).map(([component, value]) => (
                    <CompactWeightComponent
                      key={component}
                      component={component}
                      value={value}
                      onChange={onUpdateClutchWeight}
                      className={`${(!includePlayoffs && component === 'playoffBonus') ? 'bg-gray-500/30 text-gray-400 opacity-50' : 'bg-red-500/30 text-red-100'}`}
                      description={component === 'gameWinningDrives' ? 'Game-winning drives' :
                                 component === 'fourthQuarterComebacks' ? '4th quarter comebacks' :
                                 component === 'clutchRate' ? 'Combined clutch rate' :
                                 component === 'playoffBonus' ? 'Playoff performance bonus' : ''}
                    />
                  ))}
                  <div className="text-center pt-1">
                    <span className={`text-xs font-medium ${Object.values(clutchWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                      Total: {Object.values(clutchWeights).reduce((sum, val) => sum + val, 0)}%
                    </span>
                    {!includePlayoffs && (
                      <div className="text-xs text-orange-300 mt-1">
                        ‚ö†Ô∏è Playoff bonus disabled
                      </div>
                    )}
                    {Object.values(clutchWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                      <button
                        onClick={onNormalizeClutchWeights}
                        className="ml-2 bg-red-500/20 hover:bg-red-500/30 px-2 py-0.5 rounded text-red-200 hover:text-white transition-colors text-xs"
                        title="Normalize to 100%"
                      >
                        ‚öñÔ∏è
                      </button>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Durability Component Sub-Details - Mobile Only */}
            {category === 'durability' && showDetails.durability && (
              <div className="md:hidden bg-white/5 rounded-lg p-3 border border-orange-500/30">
                <h5 className="text-orange-200 font-medium mb-2 text-sm flex items-center">
                  ‚ö° Durability Components
                </h5>
                <div className="space-y-2">
                  {Object.entries(durabilityWeights).map(([component, value]) => (
                    <CompactWeightComponent
                      key={component}
                      component={component}
                      value={value}
                      onChange={onUpdateDurabilityWeight}
                      className="bg-orange-500/30 text-orange-100"
                      description={component === 'availability' ? 'Games started average' :
                                 component === 'consistency' ? 'Multi-year consistency bonus' : ''}
                    />
                  ))}
                  <div className="text-center pt-1">
                    <span className={`text-xs font-medium ${Object.values(durabilityWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
                      Total: {Object.values(durabilityWeights).reduce((sum, val) => sum + val, 0)}%
                    </span>
                    {Object.values(durabilityWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
                      <button
                        onClick={onNormalizeDurabilityWeights}
                        className="ml-2 bg-orange-500/20 hover:bg-orange-500/30 px-2 py-0.5 rounded text-orange-200 hover:text-white transition-colors text-xs"
                        title="Normalize to 100%"
                      >
                        ‚öñÔ∏è
                      </button>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Desktop-only sub-component sections (original layout) */}
      {/* Support Component Details Dropdown - Desktop */}
      {showDetails.support && (
        <div className="hidden md:block mt-6 bg-white/5 rounded-lg p-4 border-2 border-purple-500/30">
          <h4 className="text-white font-medium mb-3 flex items-center">
            üèüÔ∏è Supporting Cast Components
            <span className="ml-2 text-xs text-purple-200 bg-purple-500/20 px-2 py-1 rounded">
              Advanced Settings
            </span>
          </h4>
          <div className="text-xs text-blue-200 mb-4">
            Adjust how much each component affects the supporting cast difficulty score. All components must sum to 100%.
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {Object.entries(supportWeights).map(([component, value]) => (
              <div key={component} className="bg-white/5 rounded-lg p-3">
                <div className="flex justify-between items-center mb-2">
                  <label className="text-white font-medium text-sm capitalize">
                    {component === 'offensiveLine' ? 'Offensive Line' : component}
                  </label>
                  <span className="bg-purple-500/30 text-purple-100 px-2 py-1 rounded text-xs">
                    {value}%
                  </span>
                </div>
                <div className="space-y-2">
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={value}
                    onChange={(e) => onUpdateSupportWeight(component, e.target.value)}
                    className="w-full h-2 bg-purple-200 rounded-lg appearance-none cursor-pointer"
                  />
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={value}
                    onChange={(e) => onUpdateSupportWeight(component, e.target.value)}
                    className="w-full px-2 py-1 bg-white/10 border border-white/20 rounded text-white text-sm text-center"
                    placeholder="0-100"
                  />
                </div>
                <div className="text-xs text-purple-200 mt-1">
                  {component === 'offensiveLine' && 'Pass protection & run blocking quality'}
                  {component === 'weapons' && 'Skill position talent & depth'}
                  {component === 'defense' && 'Field position & game script impact'}
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-3 text-center space-y-2">
            <span className={`text-sm font-bold ${Object.values(supportWeights).reduce((sum, val) => sum + val, 0) === 100 ? 'text-green-400' : 'text-blue-400'}`}>
              Component Total: {Object.values(supportWeights).reduce((sum, val) => sum + val, 0)}%
            </span>
            {Object.values(supportWeights).reduce((sum, val) => sum + val, 0) !== 100 && (
              <div>
                <button
                  onClick={onNormalizeSupportWeights}
                  className="bg-purple-500/20 hover:bg-purple-500/30 px-3 py-1 rounded text-purple-200 hover:text-white transition-colors text-xs font-medium"
                  title="Adjust all components proportionally to total exactly 100%"
                >
                  ‚öñÔ∏è Normalize to 100%
                </button>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Total Weight Summary */}
      <div className="text-center space-y-2 pt-4 border-t border-white/10">
        <span className={`text-lg font-bold ${totalWeight === 100 ? 'text-green-400' : 'text-red-400'}`}>
          Total Weight: {totalWeight}%
        </span>
        {totalWeight !== 100 && (
          <div>
            <button
              onClick={onNormalizeWeights}
              className="bg-blue-500/20 hover:bg-blue-500/30 px-4 py-2 rounded-lg text-blue-200 hover:text-white transition-colors text-sm font-medium"
              title="Adjust all weights proportionally to total exactly 100%"
            >
              ‚öñÔ∏è Normalize to 100%
            </button>
          </div>
        )}
      </div>
    </div>
  );
});

WeightControls.displayName = 'WeightControls';

export default WeightControls; 